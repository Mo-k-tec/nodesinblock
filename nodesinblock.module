<?php
// $Id$

/**
 * @file
 * Nodes in block makes it possible to add multiple nodes in one block.
 */

define('NIB_RENDER_TEASER', '1');
define('NIB_RENDER_PAGE', '2');

/**
 * Implementation of hook_perm().
 */
function nodesinblock_perm() {
  return array('administer nodes in block');
}

/**
 * Implementation of hook_menu().
 */
function nodesinblock_menu() {
  $items = array();
  $items['admin/settings/nodesinblock'] = array(
    'title' => 'Nodes in block',
    'description' => 'Configure settings for node in block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodesinblock_settings'),
    'access arguments' => array('administer nodes in block'),
    'file' => 'nodesinblock.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 * Add Nodes in block fieldset.
 */
function nodesinblock_form_alter(&$form, $form_state, $form_id) {
  $saved_types = variable_get('nodesinblock_contenttypes', array());
  if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id && isset($saved_types[$form['#node']->type]) && $saved_types[$form['#node']->type] != '0') {

    $deltas = variable_get('nodesinblock_'. $form['#node']->type .'_block', array());
    $block_options = array();
    $a = 1;
    $i = 0;
    foreach ($deltas as $key => $value) {
      if ($deltas[$a] != 0)
      $block_options[$i] = check_plain(variable_get('nodesinblock_friendlyname_'. $a, t('Nodes in block '. $a)));
      $a++;
      $i++;
    }

    if (!empty($block_options)) {

      $options = array(0 => t('Disabled'), 1 => t('Enabled'));

      if (!empty($form_state['values'])) {
        $node_info['status'] = $form_state['values']['nodesinblock_enable'];
        $node_info['visibility'] = $form_state['values']['nodesinblock_visibility'];
        $node_info['weight'] = $form_state['values']['nodesinblock_weight'];
        $node_info['delta'] = $form_state['values']['nodesinblock_delta'];
        $node_info['render'] = $form_state['values']['nodesinblock_render'];
      }
      elseif (!empty($form['nid']['#value'])) {
        $node_info = db_fetch_array(db_query("SELECT * FROM {nodes_in_block} WHERE nid = %d", $form['nid']['#value']));
      }
      else {
        $node_info = array('status' => 0, 'weight' => 0, 'visibility' => '', 'delta' => 0, 'render' => NIB_RENDER_PAGE);
      }

      $form['nodesinblock'] = array(
        '#type' => 'fieldset',
        '#title' => t('Nodes in block'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['nodesinblock']['nodesinblock_enable'] = array(
        '#prefix' => '<div id="nodesinblock_admin">',
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $node_info['status']
      );
      $form['nodesinblock']['nodesinblock_delta'] = array(
        '#type' => 'select',
        '#title' => t('Select region'),
        '#options' => $block_options,
        '#default_value' => $node_info['delta'],
      );
      $form['nodesinblock']['nodesinblock_weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#delta' => 50,
        '#default_value' => $node_info['weight']
      );
      $form['nodesinblock']['nodesinblock_render'] = array(
        '#type' => 'select',
        '#title' => t('Render node as'),
        '#options' => array(NIB_RENDER_TEASER => t('Teaser'), NIB_RENDER_PAGE => t('Page')),
        '#default_value' => $node_info['render']
      );
      $form['nodesinblock']['nodesinblock_visibility'] = array(
        '#type' => 'textarea',
        '#title' => t('Visibility settings'),
        '#description' => t('Enter one page per line as Drupal paths. The \'*\' character is a wildcard. Example paths are blog for the blog page and blog/* for every personal blog. &lt;front&gt; is the front page.'),
        '#default_value' => $node_info['visibility'],
        '#suffix' => '</div>',
      );
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function nodesinblock_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (isset($node->nodesinblock_enable)) {
    switch ($op) {
      case 'validate':
        _nodesinblock_validate($node);
        break;
      case 'insert':
      case 'update':
      case 'delete':
        _nodesinblock_save($node, $op);
    }
  }
}

/**
 * Implementation of hook_block().
 */
function nodesinblock_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $number_of_blocks = variable_get('nodesinblock_nrofblocks', 1);
      for ($i = 0, $a = 1; $i < $number_of_blocks; $i++, $a++) {
        $blocks[$i] = array(
          'info' => check_plain(variable_get('nodesinblock_friendlyname_'. $a, t('Nodes in block '. $a))),
          'weight' => 0,
          'enabled' => 0,
          'region' => 'left',
          'cache' => BLOCK_CACHE_PER_PAGE,
        );
      }
      return $blocks;
      break;
    case 'view':
      $a = $delta;
      $a++;
      $block = array(
        'subject' => check_plain(variable_get('nodesinblock_friendlyname_'. $a, t('Nodes in block '. $a))),
        'content' => _nodesinblock_show($delta)
      );
      return $block;
      break;
  }
}

/**
 * Function callback: validate node. Returns error if visibility is empty and status is enabled.
 */
function _nodesinblock_validate($node) {
  $visibility = $node->nodesinblock_visibility;
  if ($node->nodesinblock_enable != '0' && empty($visibility)) {
    form_set_error('nodesinblock_visibility', t('Visibility field is required.'));
  }
}

/**
 * Function callback: save node settings into nodesinblock table and update block visibility pages.
 */
function _nodesinblock_save($node, $op) {

  // Delete old record.
  db_query("DELETE FROM {nodes_in_block} WHERE nid = %d", $node->nid);

  // Save if node is not deleted
  if ($op != 'delete') {
    $nodeinblock = new stdClass;
    $nodeinblock->nid = $node->nid;
    $nodeinblock->delta = $node->nodesinblock_delta;
    $nodeinblock->weight = $node->nodesinblock_weight;
    $nodeinblock->status = $node->nodesinblock_enable;
    $nodeinblock->visibility = trim($node->nodesinblock_visibility);
    $nodeinblock->render = $node->nodesinblock_render;
    drupal_write_record('nodes_in_block', $nodeinblock);
  }

  // Get visibility paths.
  $visibility = array();
  $result = db_query("SELECT visibility FROM {nodes_in_block} nib LEFT JOIN {node} n on n.nid = nib.nid WHERE nib.delta = %d AND nib.status > 0 AND n.status = 1", $node->nodesinblock_delta);
  while ($row = db_fetch_object($result)) {
    $node_visibility = explode("\n", $row->visibility);
    foreach ($node_visibility as $path)
    $visibility[] = trim($path);
  }

  // Update blocks table.
  $visibility = array_unique($visibility);
  db_query("UPDATE {blocks} set visibility = 1, pages = '%s' WHERE module = 'nodesinblock' AND delta = %d", implode("\n", $visibility), $node->nodesinblock_delta);
}

/**
 * Function callback: get content for a block.
 */
function _nodesinblock_show($delta) {
  $output = '';
  $query = "SELECT nib.nid, visibility, render FROM {nodes_in_block} nib
    LEFT JOIN {node} n on n.nid = nib.nid
    WHERE n.status = 1 AND nib.status > 0 AND delta = %d
    ORDER BY weight
  ";
  $result = db_query($query, $delta);
  $path = drupal_get_path_alias($_GET['q']);
  while ($row = db_fetch_object($result)) {
    $paths = explode("\n", trim($row->visibility));
    foreach ($paths as $key => $val) {
      // Match the path.
      $page_match = drupal_match_path($path, $val);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $val);
      }
      $page_match = !(1 xor $page_match);

      // We have a match, load the node.
      if ($page_match) {
        $node = node_load($row->nid);

        // if the node type is translatable, try to load the node with the appropriate
        // language from the translation set.
        if (module_exists('translation') && translation_supported_type($node->type)) {
          global $language;
          $translations = translation_node_get_translations($node->tnid);
          $language_default = language_default();

          if ($translations[$language->language]) {
            $node = node_load($translations[$language->language]->nid);
          }
          elseif ($translations[$language_default->language]) {
            // if no translation was found, display the default site language translation
            $node = node_load($translations[$language_default->language]->nid);
          }
          else {
            // otherwise we just use the main node
            return;
          }
        }

        $node->nodesinblock = 1;
        $output .= '<div class="nodesinblock_'. $node->nid .'">';
        $output .= ($row->render == NIB_RENDER_TEASER) ? node_view($node, TRUE) : node_view($node, FALSE, TRUE);
        $output .= '</div>';
      }
    }
  }
  return $output;
}
